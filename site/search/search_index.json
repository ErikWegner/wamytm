{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Korporator Korporator is a collaboration tool for office times. Every person in a team can plan their times in the office, times working remote or being on vacation. Teams are organized in a hierarchy.","title":"User Guide"},{"location":"#korporator","text":"Korporator is a collaboration tool for office times. Every person in a team can plan their times in the office, times working remote or being on vacation. Teams are organized in a hierarchy.","title":"Korporator"},{"location":"development/","text":"Development Preparations Checkout dev branch from repository Start required containers: docker-compose -f docker-compose-dev.yml up -d Database Connect to database server: docker-compose -f docker-compose-dev.yml exec db psql -U postgres Setup database (see commands ) Keycloak identity server Open Keycloak by visiting https://localhost:8443/auth/ Temporarily accept certificate Korporator setup Install Python 3.9 Install pipenv : pip install pipenv Enter pipenv environment: pipenv shell Install dependencies: pipenv install Initialize database: cd src && DJANGO_SETTINGS_MODULE=wamytmsite.settings.dev python manage.py migrate Create super user: cd src && DJANGO_SETTINGS_MODULE=wamytmsite.settings.dev python manage.py createsuperuser (Optional) Remove existing data and create new example data: cd src && DJANGO_SETTINGS_MODULE=wamytmsite.settings.dev python manage.py example_data Running Run korporator Run application in development mode: cd src && DJANGO_SETTINGS_MODULE=wamytmsite.settings.dev python manage.py runserver Access the backend at http://localhost:8000/admin/ Access the frondend at http://localhost:8000/ Example users: user1:3itsvxks, user2:Fq5vnMfj Tests Run tests: Bash: # setup environment export DJANGO_SETTINGS_MODULE=wamytmsite.settings.test cd src ./manage.py collectstatic # run tests ./manage.py test PowerShell: # setup environment $env:DJANGO_SETTINGS_MODULE=\"wamytmsite.settings.test\" cd src python manage.py collectstatic # run tests python manage.py test Run tests with coverage: cd src DJANGO_SETTINGS_MODULE=wamytmsite.settings.test coverage run --source='.' manage.py test wamytmapp coverage html python -m http.server --directory htmlcov/ 8008 Database setup commands: create user wamytm with encrypted password 'Stw9nUvm'; alter role wamytm set client_encoding to 'utf8'; alter role wamytm set default_transaction_isolation to 'read committed'; alter role wamytm set timezone to 'UTC'; create database wamytmdb; revoke CONNECT on DATABASE wamytmdb from public; grant all on DATABASE wamytmdb to wamytm; alter database wamytmdb owner to wamytm; \\c wamytmdb alter schema public owner to wamytm; \\q To run tests, execute this command: ALTER USER wamytm CREATEDB;","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#preparations","text":"Checkout dev branch from repository Start required containers: docker-compose -f docker-compose-dev.yml up -d Database Connect to database server: docker-compose -f docker-compose-dev.yml exec db psql -U postgres Setup database (see commands ) Keycloak identity server Open Keycloak by visiting https://localhost:8443/auth/ Temporarily accept certificate Korporator setup Install Python 3.9 Install pipenv : pip install pipenv Enter pipenv environment: pipenv shell Install dependencies: pipenv install Initialize database: cd src && DJANGO_SETTINGS_MODULE=wamytmsite.settings.dev python manage.py migrate Create super user: cd src && DJANGO_SETTINGS_MODULE=wamytmsite.settings.dev python manage.py createsuperuser (Optional) Remove existing data and create new example data: cd src && DJANGO_SETTINGS_MODULE=wamytmsite.settings.dev python manage.py example_data","title":"Preparations"},{"location":"development/#running","text":"Run korporator Run application in development mode: cd src && DJANGO_SETTINGS_MODULE=wamytmsite.settings.dev python manage.py runserver Access the backend at http://localhost:8000/admin/ Access the frondend at http://localhost:8000/ Example users: user1:3itsvxks, user2:Fq5vnMfj","title":"Running"},{"location":"development/#tests","text":"","title":"Tests"},{"location":"development/#run-tests","text":"Bash: # setup environment export DJANGO_SETTINGS_MODULE=wamytmsite.settings.test cd src ./manage.py collectstatic # run tests ./manage.py test PowerShell: # setup environment $env:DJANGO_SETTINGS_MODULE=\"wamytmsite.settings.test\" cd src python manage.py collectstatic # run tests python manage.py test","title":"Run tests:"},{"location":"development/#run-tests-with-coverage","text":"cd src DJANGO_SETTINGS_MODULE=wamytmsite.settings.test coverage run --source='.' manage.py test wamytmapp coverage html python -m http.server --directory htmlcov/ 8008","title":"Run tests with coverage:"},{"location":"development/#database-setup-commands","text":"create user wamytm with encrypted password 'Stw9nUvm'; alter role wamytm set client_encoding to 'utf8'; alter role wamytm set default_transaction_isolation to 'read committed'; alter role wamytm set timezone to 'UTC'; create database wamytmdb; revoke CONNECT on DATABASE wamytmdb from public; grant all on DATABASE wamytmdb to wamytm; alter database wamytmdb owner to wamytm; \\c wamytmdb alter schema public owner to wamytm; \\q To run tests, execute this command: ALTER USER wamytm CREATEDB;","title":"Database setup commands:"},{"location":"install/","text":"Install guide Requirements PostgresQL database OpenID Connect provider (optional), e. g. a Keycloak instance, for single sign on Running The application can be run using the provided container at Docker Hub . Supported environment variables: SECRET_KEY random value. Keep it secret. Details USE_X_FORWARDED_HOST can be True to use a X-Forwarded-Host header to construct links WAMYTM_DEBUG should be False in production to hide error details. WAMYTM_DATABASE_HOST Database server name WAMYTM_DATABASE_NAME Database name WAMYTM_DATABASE_USERNAME Username for database connection WAMYTM_DATABASE_PASSWORD Password for database connection WAMYTM_KEYCLOAK_CLIENT_ID OpenID client id (value is taken from OpenID provider) WAMYTM_KEYCLOAK_CLIENT_SECRET OpenID client secret (value is taken from OpenID provider) WAMYTM_KEYCLOAK_PUBLIC_KEY JWT public key (value is taken from OpenID provider) WAMYTM_KEYCLOAK_AUTH_URL redirect uri for user logins WAMYTM_KEYCLOAK_TOKEN_URL uri to exchange tokens from backend to OpenID connect provider WAMYTM_KEYCLOAK_VERIFY_SSL should be True in production to verify provider connection WAMYTM_TRUST_X_FORWARDED_PROTO can be True to trust a X-Forwarded_Proto header Running from repository using docker-compose The following steps start a demonstration instance. Start required containers: docker-compose up -d Database Connect to database server: docker-compose exec db psql -U postgres Setup database (see commands ) Keycloak identity server Open Keycloak by visiting https://localhost:8443/auth/ Temporary accept certificate Korporator setup Connect to the app: docker-compose exec korporator /bin/bash Run python manage.py migrate to initialize database Run python manage.py createsuperuser to create backend admin Access the backend at http://localhost:8000/admin/ Access the frondend at http://localhost:8000/ Example users: user1:3itsvxks, user2:Fq5vnMfj Database setup commands: create user wamytm with encrypted password 'Stw9nUvm'; alter role wamytm set client_encoding to 'utf8'; alter role wamytm set default_transaction_isolation to 'read committed'; alter role wamytm set timezone to 'UTC'; create database wamytmdb; revoke CONNECT on DATABASE wamytmdb from public; grant all on DATABASE wamytmdb to wamytm; alter database wamytmdb owner to wamytm; \\c wamytmdb alter schema public owner to wamytm; \\q Configure login with Keycloak Create a new client wamytm in the realm's Clients section Configure client settings: Settings > Access Type > confidential Settings > Fine Grain OpenID Connect Configuration > User Info Signed Response Algorithm > RS256 Settings > Fine Grain OpenID Connect Configuration > Request Object Signature Algorithm > RS256 Use the Client ID (Settings tab) as value for WAMYTM_KEYCLOAK_CLIENT_ID Use the Secret (Credentials tab) as value for WAMYTM_KEYCLOAK_CLIENT_SECRET Get the public key from Realm Settings > Keys > Public key and put it into settings as WAMYTM_KEYCLOAK_PUBLIC_KEY Update urls in WAMYTM_KEYCLOAK_AUTH_URL and WAMYTM_KEYCLOAK_TOKEN_URL with the correct hostname, port and realm name Configure username mapper: Clients > Client ID > Mappers: Create User Property mapper, set Token Claim Name to username , Property to username (or something equal, e. g. email) Open Client Scopes and add new scope wamytm Open Mappers tab and add a new mapper: Name wamytm-audience , Mapper Type Audience , Included Client Audience: wamytm , Add to access token on Open Clients > wamytm > Client Scopes and add wamytm from Available client scopes to Assigned default client scopes","title":"Install guide"},{"location":"install/#install-guide","text":"","title":"Install guide"},{"location":"install/#requirements","text":"PostgresQL database OpenID Connect provider (optional), e. g. a Keycloak instance, for single sign on","title":"Requirements"},{"location":"install/#running","text":"The application can be run using the provided container at Docker Hub . Supported environment variables: SECRET_KEY random value. Keep it secret. Details USE_X_FORWARDED_HOST can be True to use a X-Forwarded-Host header to construct links WAMYTM_DEBUG should be False in production to hide error details. WAMYTM_DATABASE_HOST Database server name WAMYTM_DATABASE_NAME Database name WAMYTM_DATABASE_USERNAME Username for database connection WAMYTM_DATABASE_PASSWORD Password for database connection WAMYTM_KEYCLOAK_CLIENT_ID OpenID client id (value is taken from OpenID provider) WAMYTM_KEYCLOAK_CLIENT_SECRET OpenID client secret (value is taken from OpenID provider) WAMYTM_KEYCLOAK_PUBLIC_KEY JWT public key (value is taken from OpenID provider) WAMYTM_KEYCLOAK_AUTH_URL redirect uri for user logins WAMYTM_KEYCLOAK_TOKEN_URL uri to exchange tokens from backend to OpenID connect provider WAMYTM_KEYCLOAK_VERIFY_SSL should be True in production to verify provider connection WAMYTM_TRUST_X_FORWARDED_PROTO can be True to trust a X-Forwarded_Proto header","title":"Running"},{"location":"install/#running-from-repository-using-docker-compose","text":"The following steps start a demonstration instance. Start required containers: docker-compose up -d Database Connect to database server: docker-compose exec db psql -U postgres Setup database (see commands ) Keycloak identity server Open Keycloak by visiting https://localhost:8443/auth/ Temporary accept certificate Korporator setup Connect to the app: docker-compose exec korporator /bin/bash Run python manage.py migrate to initialize database Run python manage.py createsuperuser to create backend admin Access the backend at http://localhost:8000/admin/ Access the frondend at http://localhost:8000/ Example users: user1:3itsvxks, user2:Fq5vnMfj","title":"Running from repository using docker-compose"},{"location":"install/#database-setup-commands","text":"create user wamytm with encrypted password 'Stw9nUvm'; alter role wamytm set client_encoding to 'utf8'; alter role wamytm set default_transaction_isolation to 'read committed'; alter role wamytm set timezone to 'UTC'; create database wamytmdb; revoke CONNECT on DATABASE wamytmdb from public; grant all on DATABASE wamytmdb to wamytm; alter database wamytmdb owner to wamytm; \\c wamytmdb alter schema public owner to wamytm; \\q","title":"Database setup commands:"},{"location":"install/#configure-login-with-keycloak","text":"Create a new client wamytm in the realm's Clients section Configure client settings: Settings > Access Type > confidential Settings > Fine Grain OpenID Connect Configuration > User Info Signed Response Algorithm > RS256 Settings > Fine Grain OpenID Connect Configuration > Request Object Signature Algorithm > RS256 Use the Client ID (Settings tab) as value for WAMYTM_KEYCLOAK_CLIENT_ID Use the Secret (Credentials tab) as value for WAMYTM_KEYCLOAK_CLIENT_SECRET Get the public key from Realm Settings > Keys > Public key and put it into settings as WAMYTM_KEYCLOAK_PUBLIC_KEY Update urls in WAMYTM_KEYCLOAK_AUTH_URL and WAMYTM_KEYCLOAK_TOKEN_URL with the correct hostname, port and realm name Configure username mapper: Clients > Client ID > Mappers: Create User Property mapper, set Token Claim Name to username , Property to username (or something equal, e. g. email) Open Client Scopes and add new scope wamytm Open Mappers tab and add a new mapper: Name wamytm-audience , Mapper Type Audience , Included Client Audience: wamytm , Add to access token on Open Clients > wamytm > Client Scopes and add wamytm from Available client scopes to Assigned default client scopes","title":"Configure login with Keycloak"},{"location":"user-guide/frontpage/","text":"Frontpage The front page starts with a week view. Parameters The front page supports these query parameters: weekdelta : a number (positive or negative) as a delta to the current week. orgunit : the id of an organizational unit. The list gets filtered when a value is provided. users : a comma separated list of usernames . The list gets further filtered when a value is provided. embed : can be set to 1 to hide some elements, e. g. inside an iframe. Buttons Previous week Move the displayed week backwards one week. Current week Jump back to current week. Next week Show items of the following week. Filters Opens a filter panel. The panel allows adjusting the selected organizational unit and jump to a specific date.","title":"Frontpage"},{"location":"user-guide/frontpage/#frontpage","text":"The front page starts with a week view.","title":"Frontpage"},{"location":"user-guide/frontpage/#parameters","text":"The front page supports these query parameters: weekdelta : a number (positive or negative) as a delta to the current week. orgunit : the id of an organizational unit. The list gets filtered when a value is provided. users : a comma separated list of usernames . The list gets further filtered when a value is provided. embed : can be set to 1 to hide some elements, e. g. inside an iframe.","title":"Parameters"},{"location":"user-guide/frontpage/#buttons","text":"","title":"Buttons"},{"location":"user-guide/frontpage/#previous-week","text":"Move the displayed week backwards one week.","title":"Previous week"},{"location":"user-guide/frontpage/#current-week","text":"Jump back to current week.","title":"Current week"},{"location":"user-guide/frontpage/#next-week","text":"Show items of the following week.","title":"Next week"},{"location":"user-guide/frontpage/#filters","text":"Opens a filter panel. The panel allows adjusting the selected organizational unit and jump to a specific date.","title":"Filters"},{"location":"user-guide/list/","text":"3 months ahead view The page 3 months ahead view shows all upcoming items in the next three months. Parameters The page supports these query parameters: orgunit : the id of an organizational unit. The list gets filtered when a value is provided. fd : from date , can be set to the starting date for the result, format it YYYY-MM-DD td : t date , can be set to the end date for the result, format it YYYY-MM-DD embed : can be set to 1 to hide some elements, e. g. inside an iframe.","title":"3 months ahead view"},{"location":"user-guide/list/#3-months-ahead-view","text":"The page 3 months ahead view shows all upcoming items in the next three months.","title":"3 months ahead view"},{"location":"user-guide/list/#parameters","text":"The page supports these query parameters: orgunit : the id of an organizational unit. The list gets filtered when a value is provided. fd : from date , can be set to the starting date for the result, format it YYYY-MM-DD td : t date , can be set to the end date for the result, format it YYYY-MM-DD embed : can be set to 1 to hide some elements, e. g. inside an iframe.","title":"Parameters"}]}